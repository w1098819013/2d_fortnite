All problems, difficulties, and discussions will be placed here.

Apr.1st
linwei17:
- Tried to get the game to render on the client side, difficulties encountered while 
stringify-ing the game model for socket. Working on removing cyclic object values.

Apr.4th
linwei17
- Implemented hashtable design for the game model on server-side.
- Server will send the initial game state over, which contains all actorIDs
- Client will have events of each player, which then sends the JSON over with actorIDs
of actors that want to change state.
- Server will recognize requests of changing states by actorIDs respectively and 
apply the changes to server-side model, then send the updated actorIDs states 
as a JSON string over to client
- Client parses JSON, apply the states to the model, renders
Note: 
- When server receives an event from client, it should call the functions 
on the server-side model that applies the change.
- When player moves: position, velocity change. Click: setFire change
- StageToJSON is never used in client-side utils
- initState is only included in the server-side utils.
- Server side model needs to have actors that have IDs

Run-through:
- Upon start, server side creates model, each actor should have its own ID
that is randomly generated by randomState() on server-side. (done)
- Sends init-converted stage JSON over to client (is actorID included in the server-side Utils, yes?) (done)
- Client receives the JSON, does the first-time update (calling updateStage() in Utils-client) (done)
- Client makes some moves (mouse, keyboard, click), sends the events over socket. (mousemove, keyboard done)
- Server receives events (JSON again), apply the events, see which actors' 
states has changed (how to do this?), then send the changes in JSON with actorID as a key for 
distinction. 
- Client receives the JSON, apply the changes to actors (stage.actors[ID].JSON[i]; loop through key in JSON).

Apr.5th:
linwei17
Problem lies in client side utils class, when lifting states out of JSON and 
into the client-side model.

Apr.6th:
-Server side: When stage is created, no main player, when the client connects, add it to the actors.
when client first connects, all actors are sent as well as the player just made for that client in the actors table.

Apr.7th:
-Opponents are unable to move, need to know why.
-node.js sends the trimmed stage over to the client, which is a JSON
that has ["actors"] = [opponentJSONs, mainPlayerJSONs]
-Since the opponent is not moving on the client side, there must be something wrong 
with the client side data parsing. (done)

-User needs to pick up ammo, see how much ammo user has when he picks up
-Client sends the keyboard event to server, server sees it, updates it, then ammo is added in step()
-Need to broadcast bullets state over to the client. Done by bulletToJSON in node.js (also trimmedToJSON())
-Client utils receives the data (in controller.js) and parses the data in updateTrimmedStage in client Utils, updates it
-Opponents will have ammo 0 for now. (Both server and client)

-client presses "e", sends data to server
-server receives, handleKeyEvent()
-handleKeyEvent(data): sets pickup of stage.player and stage.actors[playerID] to true.
-startGame calls stage.step(), which calls player.step()
-player.step() checks if pickup is true (which IS true), sets ammo to 30, health to 10.
-Then sets it back to false. (ammo is set correctly? yes, the bug is a spelling mistake)
-startGame() calls broadcast()
-broadcast() calls trimmedToJSON(); (ammo can now decrease when client clicks)

Firing Bullets
-client clicks, sends data to server
-server receives, handleMouseClickEvent()
-handleMouseClickEvent(): calls stage.mouseClick (also calls other stuff, but we don't care for now)
-mouseClick sets player.fire to true
-startGame calls stage.step(), which calls player.step()
-player.step() checks if player.fire is true and player.ammunition >0
-Minus 1 from ammunition, creates a bullet, stage.addActor(bullet)
-startGame() calls broadcast()
-broadcast() calls trimmedToJSON(), sees bullet, convert to JSON, pushes it into BigJSON["actors"] = []
-Problem, player's turretDirection in server side model is weird, NaN
-Something is wrong with player.pointTurret, but does not move it on canvas on client, why?
-server sends the Turretdirection over. (done)

Rendering Stuff
Problems: 
-The direction of the player is set properly, but it is not rendering properly on the client side(done).
-Bullets can be fired, but still not rendering.
-Maybe: colour is not right? (it is right actually); draw() is never called for bullets. 


turretDirection is a pair
sProd(z): returns a new pair with pair(x*z, y*z) 
vecAdd(other): returns a new pair with pair(x+other.z, y+other.z)